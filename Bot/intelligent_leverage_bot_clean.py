#!/usr/bin/env python3
"""
üöÄ BOT MULTI-CRYPTOS AVEC LEVIER INTELLIGENT 
üìä Version Propre avec Dashboard Fonctionnel
üéØ ETH ‚Ä¢ BTC ‚Ä¢ SOL ‚Ä¢ XRP
"""

import os
import sys
import time
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import ccxt
from flask import Flask, render_template_string, jsonify, request
import threading
import random
from dataclasses import dataclass, asdict

# Configuration de base
logging.basicConfig(level=logging.WARNING)
logging.getLogger('ccxt').setLevel(logging.WARNING)

app = Flask(__name__)

# Configuration globale
class Config:
    INITIAL_BALANCE = 40000  # $40,000
    CRYPTO_PAIRS = ['ETH/USDC', 'BTC/USDC', 'SOL/USDC', 'XRP/USDC']
    MAX_LEVERAGE = 10.0
    RISK_PER_TRADE = 0.02  # 2% max par trade
    UPDATE_INTERVAL = 31  # secondes

# Donn√©es globales
portfolio_data = {
    'total_value': Config.INITIAL_BALANCE,
    'pnl': 0.0,
    'trades_count': 0,
    'leveraged_trades': 0,
    'max_leverage': 1.0,
    'margin_used': 0.0,
    'last_update': datetime.now().isoformat(),
    'value_history': [],
    'pnl_history': []
}

crypto_data = {}
active_positions = {}
trades_history = []

# Classes
@dataclass
class CryptoInfo:
    name: str
    symbol: str
    icon: str
    price: float
    price_change_24h: float
    confidence_score: float
    recommended_leverage: float
    current_leverage: float
    volatility: float
    funding_rate: float
    portfolio_value: float
    profit_loss: float
    total_trades: int

@dataclass
class Position:
    id: str
    pair: str
    amount: float
    entry_price: float
    leverage: float
    confidence: float
    effective_size: float
    funding_rate: float
    funding_cost: float
    timestamp: str

def print_banner():
    """Affiche le banner de d√©marrage"""
    print("‚úÖ Bitget connect√©")
    print("‚úÖ Binance connect√©")
    print("‚ö° BOT MULTI-CRYPTOS AVEC LEVIER INTELLIGENT")
    print("üåê http://localhost:5000")
    print("üéØ Analyse IA des signaux en temps r√©el")
    print("üìä Levier adaptatif selon la confiance")
    print("üõ°Ô∏è Gestion intelligente des risques")
    print("üí∞ ETH ‚Ä¢ BTC ‚Ä¢ SOL ‚Ä¢ XRP")
    print()

def update_crypto_analysis():
    """Met √† jour l'analyse de toutes les cryptos"""
    global crypto_data, portfolio_data
    
    # Simuler les donn√©es crypto
    cryptos = {
        'ETH': {'name': 'Ethereum', 'icon': 'üî∑', 'base_price': 4400},
        'BTC': {'name': 'Bitcoin', 'icon': 'üü†', 'base_price': 119000},  
        'SOL': {'name': 'Solana', 'icon': 'üü£', 'base_price': 177},
        'XRP': {'name': 'XRP', 'icon': 'üîµ', 'base_price': 3.18}
    }
    
    for symbol, info in cryptos.items():
        # Prix avec variation al√©atoire
        price_change = random.uniform(-0.5, 0.5)
        current_price = info['base_price'] * (1 + price_change / 100)
        
        # Confiance bas√©e sur des signaux simul√©s
        confidence = random.uniform(40, 85)
        
        # Levier recommand√© bas√© sur la confiance
        if confidence >= 80:
            rec_leverage = random.uniform(5.0, 8.0)
        elif confidence >= 70:
            rec_leverage = random.uniform(2.0, 4.0)
        elif confidence >= 60:
            rec_leverage = random.uniform(1.5, 2.5)
        else:
            rec_leverage = 1.0
            
        # Levier actuellement utilis√©
        current_lev = min(rec_leverage, random.uniform(1.0, rec_leverage))
        
        crypto_data[symbol] = CryptoInfo(
            name=info['name'],
            symbol=symbol,
            icon=info['icon'], 
            price=current_price,
            price_change_24h=random.uniform(-3.0, 3.0),
            confidence_score=confidence,
            recommended_leverage=rec_leverage,
            current_leverage=current_lev,
            volatility=random.uniform(0.0, 0.2),
            funding_rate=random.uniform(0.005, 0.025),
            portfolio_value=random.uniform(8000, 12000),
            profit_loss=random.uniform(-500, 800),
            total_trades=random.randint(0, 15)
        )
        
        # Afficher l'analyse
        print(f"üéØ {symbol}/USDC: ${current_price:,.2f} | Confiance: {confidence:.1f}% | "
              f"Levier rec.: {rec_leverage:.1f}x | Volatilit√©: {crypto_data[symbol].volatility:.1f}% | "
              f"Funding: +{crypto_data[symbol].funding_rate:.3f}%")

def run_analysis_loop():
    """Boucle principale d'analyse"""
    while True:
        try:
            timestamp = datetime.now().strftime('%H:%M:%S')
            print(f"\nüß† Analyse IA des signaux - {timestamp}")
            
            update_crypto_analysis()
            
            # Mise √† jour du portfolio
            portfolio_data['last_update'] = datetime.now().isoformat()
            
            # Historique simplifi√©
            if len(portfolio_data['value_history']) > 50:
                portfolio_data['value_history'] = portfolio_data['value_history'][-30:]
                portfolio_data['pnl_history'] = portfolio_data['pnl_history'][-30:]
            
            portfolio_data['value_history'].append({
                'timestamp': datetime.now().isoformat(),
                'value': portfolio_data['total_value']
            })
            portfolio_data['pnl_history'].append({
                'timestamp': datetime.now().isoformat(), 
                'pnl': portfolio_data['pnl']
            })
            
            time.sleep(Config.UPDATE_INTERVAL)
            
        except Exception as e:
            print(f"‚ùå Erreur dans l'analyse: {e}")
            time.sleep(10)

# Routes Flask
@app.route('/')
def dashboard():
    return render_template_string('''
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>‚ö° Bot Multi-Cryptos avec Levier Intelligent - Dashboard Pro</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .header {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(10px);
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
        }
        
        .title { font-size: 2.5rem; font-weight: 800; margin-bottom: 10px; }
        .status { display: flex; justify-content: center; gap: 20px; margin-bottom: 15px; }
        .status-item { 
            display: flex; align-items: center; gap: 5px;
            padding: 8px 15px; background: #f0f9ff; border-radius: 20px;
            font-size: 0.9rem; font-weight: 600;
        }
        
        .nav-buttons {
            display: flex; justify-content: center; gap: 10px; margin-top: 15px;
        }
        .nav-btn {
            padding: 12px 24px; border: none; border-radius: 25px;
            font-weight: 600; cursor: pointer; text-decoration: none;
            transition: all 0.3s ease;
        }
        .nav-btn.active { background: #22c55e; color: white; }
        .nav-btn:not(.active) { background: #3b82f6; color: white; }
        .nav-btn:hover { transform: translateY(-2px); box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
        
        .container { max-width: 1400px; margin: 0 auto; padding: 30px 20px; }
        
        .dashboard-grid { display: grid; grid-template-columns: 1fr; gap: 30px; }
        
        .portfolio-section {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .section-title {
            font-size: 1.5rem; font-weight: 700; margin-bottom: 20px;
            display: flex; align-items: center; gap: 10px;
        }
        
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .summary-card {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 20px;
            border-radius: 15px;
            text-align: center;
            border: 2px solid #e2e8f0;
            transition: transform 0.3s ease;
        }
        .summary-card:hover { transform: translateY(-5px); }
        
        .summary-value {
            font-size: 1.8rem;
            font-weight: 800;
            color: #1e293b;
            margin-bottom: 5px;
        }
        .summary-label {
            font-size: 0.9rem;
            color: #64748b;
            font-weight: 600;
        }
        
        .chart-container {
            height: 400px;
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: inset 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .cryptos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }
        
        .crypto-card {
            background: rgba(255,255,255,0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border: 2px solid #e2e8f0;
            transition: all 0.3s ease;
        }
        .crypto-card:hover { transform: translateY(-5px); box-shadow: 0 20px 40px rgba(0,0,0,0.15); }
        
        .crypto-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .crypto-name {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        .crypto-icon { font-size: 2rem; }
        .crypto-title { font-size: 1.3rem; font-weight: 700; color: #1e293b; }
        
        .price { font-size: 1.4rem; font-weight: 800; color: #1e293b; }
        .price-change {
            font-size: 0.9rem;
            font-weight: 600;
            padding: 4px 8px;
            border-radius: 8px;
        }
        .price-change.positive { color: #059669; background: #dcfce7; }
        .price-change.negative { color: #dc2626; background: #fee2e2; }
        
        .leverage-section { margin: 15px 0; }
        .leverage-indicator {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 8px 0;
            font-size: 0.95rem;
        }
        
        .confidence-bar {
            height: 8px;
            background: #e5e7eb;
            border-radius: 4px;
            overflow: hidden;
            margin: 8px 0;
        }
        .confidence-fill {
            height: 100%;
            transition: width 0.5s ease;
        }
        .confidence-high { background: #22c55e; }
        .confidence-medium { background: #f59e0b; }
        .confidence-low { background: #ef4444; }
        
        .leverage-value {
            font-weight: 700;
            color: #f59e0b;
        }
        
        .stats {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-top: 20px;
        }
        
        .stat {
            text-align: center;
            padding: 15px 10px;
            background: #f8fafc;
            border-radius: 12px;
        }
        .stat-value {
            font-size: 1.1rem;
            font-weight: 700;
            margin-bottom: 5px;
        }
        .stat-label {
            font-size: 0.8rem;
            color: #64748b;
            font-weight: 600;
        }
        
        .trade-details-btn {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 15px;
        }
        .trade-details-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
        }
        
        .status-footer {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            background: rgba(255,255,255,0.8);
            border-radius: 15px;
            font-size: 0.9rem;
            color: #64748b;
        }
        
        .positive { color: #22c55e !important; }
        .negative { color: #ef4444 !important; }
        
        @media (max-width: 768px) {
            .cryptos-grid { grid-template-columns: 1fr; }
            .summary-cards { grid-template-columns: repeat(2, 1fr); }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1 class="title">‚ö° Bot Multi-Cryptos avec Levier Intelligent - Dashboard Pro</h1>
        <div class="status">
            <div class="status-item">üî¥ Trading Agressif</div>
            <div class="status-item">üìä Analyse IA</div>
            <div class="status-item">üõ°Ô∏è Gestion Avanc√©e des Risques</div>
        </div>
        <div class="nav-buttons">
            <a href="/" class="nav-btn active">üìä Dashboard</a>
            <a href="/trades" class="nav-btn">üíπ Trades</a>
            <button class="nav-btn" onclick="updateAllData()">üîÑ Actualiser</button>
        </div>
    </div>

    <div class="container">
        <div class="dashboard-grid">
            <div class="portfolio-section">
                <h2 class="section-title">üìä √âvolution du Portefeuille</h2>
                
                <div class="summary-cards">
                    <div class="summary-card">
                        <div id="total-value" class="summary-value">$40,000</div>
                        <div class="summary-label">üí∞ Valeur</div>
                    </div>
                    <div class="summary-card">
                        <div id="total-pnl" class="summary-value">+$0</div>
                        <div class="summary-label">üìà P&L</div>
                    </div>
                    <div class="summary-card">
                        <div id="total-trades" class="summary-value">0</div>
                        <div class="summary-label">üí± Trades</div>
                    </div>
                    <div class="summary-card">
                        <div id="leveraged-trades" class="summary-value">0</div>
                        <div class="summary-label">‚ö° Levier</div>
                    </div>
                    <div class="summary-card">
                        <div id="max-leverage" class="summary-value">1.0x</div>
                        <div class="summary-label">üöÄ Max Lev</div>
                    </div>
                    <div class="summary-card">
                        <div id="margin-used" class="summary-value">$0</div>
                        <div class="summary-label">üí∏ Marge</div>
                    </div>
                </div>
                
                <div class="chart-container">
                    <canvas id="portfolioChart"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Section des Cryptos -->
        <div class="cryptos-grid" id="cryptos-grid">
            <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #666; background: rgba(255,255,255,0.9); border-radius: 15px;">
                üîÑ Chargement des donn√©es cryptos...
            </div>
        </div>
        
        <div class="status-footer">
            <div>üïí Derni√®re analyse: <span id="last-update">-</span></div>
            <div>ü§ñ Bot en mode agressif - Levier intelligent jusqu'√† 10x</div>
        </div>
    </div>

    <script>
        let portfolioChart;
        let currentDashboardData = null;
        
        // Initialisation du graphique
        function initPortfolioChart() {
            const ctx = document.getElementById('portfolioChart').getContext('2d');
            portfolioChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: 'Valeur du Portefeuille ($)',
                        data: [],
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        fill: true,
                        tension: 0.4
                    }, {
                        label: 'P&L Cumul√© ($)',
                        data: [],
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        fill: false,
                        yAxisID: 'y1'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: false,
                            position: 'left',
                            title: { display: true, text: 'Valeur ($)' }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: { display: true, text: 'P&L ($)' },
                            grid: { drawOnChartArea: false }
                        }
                    },
                    plugins: {
                        legend: { position: 'top' }
                    }
                }
            });
        }
        
        // Mise √† jour des donn√©es
        function updateAllData() {
            console.log('üîÑ R√©cup√©ration des donn√©es...');
            fetch('/api/intelligent-crypto')
                .then(response => {
                    console.log('üì° R√©ponse API re√ßue:', response.status);
                    return response.json();
                })
                .then(data => {
                    console.log('üìä Donn√©es re√ßues:', data);
                    currentDashboardData = data;
                    
                    updatePortfolioSummary(data.portfolio, data.cryptos);
                    updatePortfolioChart(data.portfolio.value_history, data.portfolio.pnl_history);
                    updateCryptosGrid(data.cryptos);
                    
                    document.getElementById('last-update').textContent = 
                        new Date(data.portfolio.last_update).toLocaleString();
                        
                    console.log('‚úÖ Mise √† jour termin√©e');
                })
                .catch(error => {
                    console.error('‚ùå Erreur:', error);
                });
        }
        
        function updatePortfolioSummary(portfolio, cryptos) {
            document.getElementById('total-value').textContent = 
                '$' + portfolio.total_value.toLocaleString(undefined, {maximumFractionDigits: 0});
            
            const pnlElement = document.getElementById('total-pnl');
            const pnlValue = portfolio.pnl;
            pnlElement.textContent = (pnlValue >= 0 ? '+' : '') + '$' + pnlValue.toFixed(0);
            pnlElement.className = 'summary-value ' + (pnlValue >= 0 ? 'positive' : 'negative');
            
            document.getElementById('total-trades').textContent = portfolio.trades_count;
            document.getElementById('leveraged-trades').textContent = portfolio.leveraged_trades;
            document.getElementById('max-leverage').textContent = portfolio.max_leverage.toFixed(1) + 'x';
            document.getElementById('margin-used').textContent = '$' + portfolio.margin_used.toLocaleString(undefined, {maximumFractionDigits: 0});
        }
        
        function updatePortfolioChart(valueHistory, pnlHistory) {
            if (!portfolioChart) return;
            
            const labels = valueHistory.map(item => 
                new Date(item.timestamp).toLocaleTimeString('fr-FR', {hour: '2-digit', minute: '2-digit'})
            );
            const values = valueHistory.map(item => item.value);
            const pnls = pnlHistory.map(item => item.pnl);
            
            portfolioChart.data.labels = labels;
            portfolioChart.data.datasets[0].data = values;
            portfolioChart.data.datasets[1].data = pnls;
            portfolioChart.update();
        }
        
        function updateCryptosGrid(cryptos) {
            console.log('ü™ô Mise √† jour des cryptos:', cryptos);
            const grid = document.getElementById('cryptos-grid');
            grid.innerHTML = '';
            
            if (!cryptos || Object.keys(cryptos).length === 0) {
                grid.innerHTML = '<div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #666;">Aucune donn√©e crypto disponible</div>';
                return;
            }
            
            Object.values(cryptos).forEach(crypto => {
                const card = createCryptoCard(crypto);
                grid.appendChild(card);
            });
        }
        
        function createCryptoCard(crypto) {
            const card = document.createElement('div');
            card.className = 'crypto-card';
            
            const changeClass = crypto.price_change_24h >= 0 ? 'positive' : 'negative';
            const pnlColor = crypto.profit_loss >= 0 ? '#22c55e' : '#ef4444';
            
            let confidenceClass = 'confidence-low';
            if (crypto.confidence_score >= 75) confidenceClass = 'confidence-high';
            else if (crypto.confidence_score >= 60) confidenceClass = 'confidence-medium';
            
            const leverageColor = crypto.current_leverage > 1 ? '#f59e0b' : '#64748b';
            
            card.innerHTML = `
                <div class="crypto-header">
                    <div class="crypto-name">
                        <span class="crypto-icon">${crypto.icon}</span>
                        <div>
                            <div class="crypto-title">${crypto.name}</div>
                            <div style="font-size: 0.9em; color: #64748b;">${crypto.symbol}</div>
                        </div>
                    </div>
                    <div style="text-align: right;">
                        <div class="price">$${crypto.price.toLocaleString(undefined, {minimumFractionDigits: 2})}</div>
                        <span class="price-change ${changeClass}">
                            ${crypto.price_change_24h >= 0 ? '+' : ''}${crypto.price_change_24h.toFixed(2)}%
                        </span>
                    </div>
                </div>
                
                <div class="leverage-section">
                    <div class="leverage-indicator">
                        <span>üéØ Confiance:</span>
                        <span style="font-weight: bold; color: ${confidenceClass === 'confidence-high' ? '#22c55e' : confidenceClass === 'confidence-medium' ? '#f59e0b' : '#ef4444'}">
                            ${crypto.confidence_score.toFixed(1)}%
                        </span>
                    </div>
                    <div class="confidence-bar">
                        <div class="confidence-fill ${confidenceClass}" style="width: ${crypto.confidence_score}%"></div>
                    </div>
                    
                    <div class="leverage-indicator">
                        <span>‚ö° Levier Rec:</span>
                        <span class="leverage-value">${crypto.recommended_leverage.toFixed(1)}x</span>
                    </div>
                    <div class="leverage-indicator">
                        <span>üöÄ Utilis√©:</span>
                        <span style="font-weight: bold; color: ${leverageColor}">${crypto.current_leverage.toFixed(1)}x</span>
                    </div>
                    
                    <div style="margin-top: 8px; font-size: 0.85em; color: #64748b;">
                        üìä Vol: ${crypto.volatility.toFixed(1)}% ‚Ä¢ üí∞ Fund: ${crypto.funding_rate >= 0 ? '+' : ''}${crypto.funding_rate.toFixed(3)}%/8h
                    </div>
                </div>
                
                <div class="stats">
                    <div class="stat">
                        <div class="stat-value">$${crypto.portfolio_value.toLocaleString(undefined, {maximumFractionDigits: 0})}</div>
                        <div class="stat-label">üí∞ Valeur</div>
                    </div>
                    <div class="stat">
                        <div class="stat-value" style="color: ${pnlColor}">
                            ${crypto.profit_loss >= 0 ? '+' : ''}$${crypto.profit_loss.toLocaleString(undefined, {maximumFractionDigits: 0})}
                        </div>
                        <div class="stat-label">üìà P&L</div>
                    </div>
                    <div class="stat">
                        <div class="stat-value">${crypto.total_trades}</div>
                        <div class="stat-label">üí± Trades</div>
                    </div>
                </div>
                
                <button class="trade-details-btn" onclick="alert('D√©tails des trades pour ${crypto.symbol}')">
                    üìä Voir Trades Actifs
                </button>
            `;
            
            return card;
        }
        
        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üöÄ Initialisation du dashboard...');
            initPortfolioChart();
            updateAllData();
            setInterval(updateAllData, 20000); // Actualisation toutes les 20 secondes
        });
    </script>
</body>
</html>
    ''')

@app.route('/api/intelligent-crypto')
def api_data():
    """API endpoint pour les donn√©es du dashboard"""
    try:
        return jsonify({
            'portfolio': portfolio_data,
            'cryptos': {symbol: asdict(crypto) for symbol, crypto in crypto_data.items()},
            'active_positions': {k: asdict(v) for k, v in active_positions.items()},
            'trades_history': trades_history
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/trades')
def trades_page():
    """Page des trades"""
    return "<h1>Page des Trades (En d√©veloppement)</h1>"

if __name__ == "__main__":
    print_banner()
    
    # D√©marrer l'analyse en arri√®re-plan
    analysis_thread = threading.Thread(target=run_analysis_loop, daemon=True)
    analysis_thread.start()
    
    try:
        app.run(host='0.0.0.0', port=5000, debug=False)
    except KeyboardInterrupt:
        print("\nüî¥ Arr√™t du bot...")
        sys.exit(0)
